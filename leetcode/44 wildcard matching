class Solution {

bool solve(string str, string ptrn, int m, int n){

    if(m == 0 && n==0 ) return true;
    if(m >0 && n==0) return false;
    if(m==0 && n>0) { // like m==0 and n-> ****a*** or ********
        for(int k=1; k<=n; k++){
            if(ptrn[k-1] != '*')
                return false;
        }
        return true;
    }


    if(str[m-1] == ptrn[n-1] || ptrn[n-1] == '?') // this is perfect match
        return solve(str, ptrn, m-1, n-1);
    else if(ptrn[n-1] == '*') // in * two match condition 1. empty 2.any comes match either same or diff
        return solve(str, ptrn, m , n-1) || solve(str, ptrn, m-1, n);
    else return false; // not match

}

public:
    bool isMatch(string str, string ptrn) {
        return solve(str, ptrn , str.size(), ptrn.size());
    }
};

========================================================================

class Solution {

vector<vector<int>> dp;
bool solve(string str, string ptrn, int m, int n){

    if(m == 0 && n==0 ) return true;
    if(m >0 && n==0) return false;
    if(m==0 && n>0) { // like m==0 and n-> ****a*** or ********
        for(int k=1; k<=n; k++){
            if(ptrn[k-1] != '*')
                return false;
        }
        return true;
    }

    if(dp[m][n] != -1) return dp[m][n];


    if(str[m-1] == ptrn[n-1] || ptrn[n-1] == '?') // this is perfect match
        return dp[m][n] = solve(str, ptrn, m-1, n-1);
    else if(ptrn[n-1] == '*') // in * two match condition 1. empty 2.any comes match either same or diff
        return dp[m][n] = solve(str, ptrn, m , n-1) || solve(str, ptrn, m-1, n);
    else return false; // not match

}

public:
    bool isMatch(string str, string ptrn) {
        int m = str.size();
        int n = ptrn.size();
        dp.assign(m+1, vector<int> (n+1, -1));
        return solve(str, ptrn , m, n);
    }
};

=================================================================================

class Solution {


public:
    bool isMatch(string str, string ptrn) {
        int m = str.size();
        int n = ptrn.size();
        vector<vector<int>> dp(m+1, vector<int>(n+1,0));
        dp[0][0] = true;

        for( int j = 1; j< n+1; j++) { // like m==0 and n-> ****a*** or ********
            bool flag = true;
            for(int k=1; k<=j; k++){
                if(ptrn[k-1] != '*'){
                    flag = false;
                    break;
                }
            }
            dp[0][j] =flag;
        }

        for( int i=1 ; i<m+1; i++){
                for(int j=1; j<n+1; j++){
                    if(str[i-1] ==  ptrn[j-1] || ptrn[j-1] == '?') // this is perfect match
                    dp[i][j] = dp[i-1][j-1];
                    else if(ptrn[j-1] == '*') // this is also for match
                        dp[i][j] =  dp[i][j-1] || dp[i-1][j];
                    else dp[i][j] = false; // not match
                }
        }

        return dp[m][n];

    //if(str[i-1] ==  ptrn[j-1] || ptrn[j-1] == '?') // this is perfect match

//else if(ptrn[j-1] == '*') // in * two match cndtn 1. empty 2.any comes match either same or diff

//dp[i][j] =  dp[i][j-1] || dp[i-1][j]; //( i , j-1) for i on something but j on empty character so automatically moved to j-1........(i-1, j)  for i on something but j is on * and star will always valid so both moved -1 bit j is not shown to moved because logically * can expand to *****.. so j will stuck there.
    }
};
=====================================================================

