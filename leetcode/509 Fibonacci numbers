class Solution {

int solve(int n){

    if(n==0 || n==1) return n;

    return solve(n-1) + solve(n-2);

        
}
public:
    
    int fib(int n) {
        
        return solve(n);
    }
};


===================================================================

class Solution {
vector<int> dp;
int solve(int n){

    if(n==0 || n==1) return n;

    if(dp[n] != -1 ) return dp[n];

    return dp[n] = solve(n-1) + solve(n-2);

        
}
public:

    
    int fib(int n) {

        dp.assign(n+1, -1);
        return solve(n);
    }
};

==============================================================
class Solution {

public:

    int fib(int n) {

        if(n==0 || n==1 ) return n; // not base condition of fibb ...only for size smaller 2

        vector<int> dp(n+1);
        dp[0] = 0;
        dp[1] = 1;


        for(int i = 2 ; i<n+1 ; i++){
            dp[i] = dp[i-1] + dp[i-2];
        }
        return dp[n];
    }
};


===================================================================

class Solution {

public:

    int fib(int n) {

        if(n==0 || n==1 ) return n; // not base condition of fibb ...only for size smaller 2

        int prev1 = 0;
        int prev2 = 1;
        int curr;
        
        for(int i = 2 ; i<n+1 ; i++){
            curr = prev1 + prev2;

            prev1 = prev2;
            prev2 = curr;
        }
        return curr;
    }
};
