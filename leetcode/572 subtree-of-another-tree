/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {

bool solve(TreeNode* root, TreeNode* subRoot){

    if(root == nullptr) return false;

    if(isBothTreeMatch(root, subRoot) == true) return true;

    return solve(root->left, subRoot) || solve(root->right, subRoot);

}

bool isBothTreeMatch(TreeNode* r1, TreeNode* r2){
    if(r1 == nullptr && r2 == nullptr) return true;

    if(r1 == nullptr || r2== nullptr || r1->val != r2-> val)
        return false;

    return isBothTreeMatch(r1->left, r2->left) && isBothTreeMatch(r1->right, r2->right);
}


public:
    bool isSubtree(TreeNode* root, TreeNode* subRoot) {

        
            return solve(root, subRoot);

    }
};
