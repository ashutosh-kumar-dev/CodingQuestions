class Solution {
public:

//======================= recursion ========================
int solve(string s1, string s2, int n ,int m){
  
  if(n== 0) return m;
  if(m == 0) return n;
  
  if(s1[n-1]==s2[m-1]){
    return solve(s1,s2,n-1,m-1);
    
  }
  
  else{
    return 1 + min(solve(s1,s2,n-1,m), min(solve(s1,s2,n,m-1),solve(s1,s2,n-1,m-1)));
  }
  
}
    int minDistance(string s1, string s2) {
        int n= s1.length();
        int m= s2.length();
      return solve(s1,s2,n,m) ; 
    }
};

//=================================== memoization ==============
class Solution {
public:

int dp[501][501];
int solve(string s1, string s2, int n ,int m){
  
  if(n== 0) return m;
  if(m == 0) return n;

  if(dp[n][m] !=-1 ) return dp[n][m];
  
  if(s1[n-1]==s2[m-1]){
    return dp[n][m] = solve(s1,s2,n-1,m-1);
    
  }
  
  else{
    return dp[n][m] = 1 + min(solve(s1,s2,n-1,m), min(solve(s1,s2,n,m-1),solve(s1,s2,n-1,m-1)));
  }
  
}
    int minDistance(string s1, string s2) {
        int n= s1.length();
        int m= s2.length();

        memset(dp,-1,sizeof(dp));
      return solve(s1,s2,n,m) ; 
    }
};
//=================================== dp ===============================
class Solution {
public:

int dp[501][501];

int solveTab(string s1, string s2, int n, int m){

    for(int i=0; i<n+1; i++){
      for(int j=0; j<m+1; j++){

        if(i==0) dp[i][j] = j;
        if(j==0) dp[i][j] = i;

      }
    }
    //dp[0][0] = 0;


    for(int i=1; i<n+1; i++){
      for(int j=1; j<m+1; j++){

        if(s1[i-1]== s2[j-1])
           dp[i][j]= dp[i-1][j-1];
        
        else
           dp[i][j] = 1 + min(dp[i-1][j], min(dp[i][j-1], dp[i-1][j-1]));

      }
    }
    return dp[n][m];
}

    int minDistance(string s1, string s2) {
        int n= s1.length();
        int m= s2.length();

       // memset(dp,-1,sizeof(dp));
      return solveTab(s1,s2,n,m) ; 
    }
};