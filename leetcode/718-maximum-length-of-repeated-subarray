class Solution {
public:
   int maxi = 0;
   vector<vector<int>> dp;
    int solve(vector<int>& arr1, vector<int>& arr2, int m, int n) {
        if (m == 0 || n == 0) return 0;

        if(dp[m][n] != -1) return dp[m][n];

        
        int ans = 0;
        if (arr1[m - 1] == arr2[n - 1]) {
            ans = 1 + solve(arr1, arr2, m - 1, n - 1);
            maxi = max(maxi, ans);
        }

    
        solve(arr1, arr2, m-1, n);
        solve(arr1, arr2,m, n-1);

        return dp[m][n] = ans;
    }
    int findLength(vector<int>& arr1, vector<int>& arr2) {
        int m = arr1.size();
        int n = arr2.size();
        dp.assign(m+1, vector<int>(n+1, -1));
         solve(arr1,arr2, m, n);
         return maxi;
        
    }
};

=========================================== dp ==========================
class Solution {
public:

    int findLength(vector<int>& arr1, vector<int>& arr2) {
        int m = arr1.size();
        int n = arr2.size();

        vector<vector<int>> dp(m+1, vector<int> (n+1,0));

        int maxi = 0;
        for(int i =1 ; i<m+1; i++){
            for(int j=1; j<n+1; j++){

                
                if(arr1[i-1] == arr2[j-1]){
                    dp[i][j] = 1 + dp[i-1][j-1];
                    maxi = max(maxi, dp[i][j]);
                }
                else{
                    // not call dp[i-1][j] and dp[i][j-1] because no return statement for both here.
                    dp[i][j] = 0;
                }
            }
        }
         return maxi;
    }
};

=================================SpOp==========================================

class Solution {
public:

    int findLength(vector<int>& arr1, vector<int>& arr2) {
        int m = arr1.size();
        int n = arr2.size();

        vector<int> currRow(n+1, 0);
        vector<int> prevRow(n+1,0);

        int maxi = 0;
        for(int i =1 ; i<m+1; i++){
            for(int j=1; j<n+1; j++){

                
                if(arr1[i-1] == arr2[j-1]){
                    currRow[j] = 1 + prevRow[j-1];
                    maxi = max(maxi, currRow[j]);
                }
                else{
                    currRow[j] = 0;
                }
                
            }
            prevRow = currRow;
        }
        
         return maxi;
        
    }
};
