class Solution {

int solve(vector<int>& arr, int n){
    if (n == 0) return arr[0];
    if (n == 1) return arr[1];

    return arr[n] + min(solve(arr, n-1), solve(arr, n-2));
}

public:
    int minCostClimbingStairs(vector<int>& arr) {
        int n = arr.size();
        return min(solve(arr, n-1), solve(arr, n-2));
    }
};

===================================================

class Solution {

vector<int> dp;
int solve(vector<int>& arr, int n){
    if (n == 0) return arr[0];
    if (n == 1) return arr[1];

    if(dp[n] != -1 ) return dp[n];

    return dp[n] = arr[n] + min(solve(arr, n-1), solve(arr, n-2));
}

public:
    int minCostClimbingStairs(vector<int>& arr) {
        int n = arr.size();

        dp.assign(n+1,-1);
        return min(solve(arr, n-1), solve(arr, n-2));
    }
};

========================================================================
class Solution {



public:
    int minCostClimbingStairs(vector<int>& arr) {
        int n = arr.size();


        vector<int> dp (n+1);
        dp[0] = arr[0];
        dp[1] = arr[1];

        for(int i=2 ; i<n; i++){
            dp[i] = arr[i] + min(dp[i-1], dp[i-2]);
        }

        return min(dp[n-1], dp[n-2]);


       
    }
};

===============================================================
class Solution {



public:
    int minCostClimbingStairs(vector<int>& arr) {
        int n = arr.size();


        int prev1 = arr[0];
        int prev2 = arr[1];
        int curr;

        for(int i=2 ; i<n; i++){
            curr = arr[i] + min(prev1, prev2);

            prev1 = prev2;
            prev2 =curr;
        }

        return min(prev1, prev2);


       
    }
};
