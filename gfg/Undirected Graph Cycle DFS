class Solution {
    
bool detect(int node, vector<int> & vis, vector<vector<int>>& adj){
    
    vis[node] = 1;
    
    queue<pair<int,int>> que;
    
    que.push({node, -1});
    
    while(!que.empty()){
        
        int node = que.front().first;
        int parent = que.front().second;
        
        que.pop();
        
        
        for(int cnode : adj[node]){
            
            if(!vis[cnode]){
                que.push({cnode, node});
                vis[cnode] =1; 
            }
            
            else if(vis[cnode]){
                if(parent != cnode) return true;
            }
        }
       
    }
     return false;
    
    
}


  public:
    // Function to detect cycle in an undirected graph.
    bool isCycle(vector<vector<int>>& adj) {
        
        int n = adj.size();
        vector<int> vis(n, 0);
        
        for(int i = 0 ; i<n; i++){
            
            if(vis[i] != 1 ){
                if( detect(i, vis, adj) )
                    return true;
            }
        }
        
        return false;
    }
};
