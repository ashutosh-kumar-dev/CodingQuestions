class Solution {
    
    
void dfs(int node, vector<int> &vis, vector<vector<int>>& adj, stack<int> & st){
    
    vis[node] = 1;
    
    for(int cnode : adj[node]){
        
        if(vis[cnode] !=1){
            dfs(cnode, vis, adj, st);
        }
    }
    
    st.push(node);
}
  public:
    // Function to return list containing vertices in Topological order.
    vector<int> topologicalSort(vector<vector<int>>& adj) {
        
        int n =  adj.size();
        stack<int> st;
        
        vector<int> vis(n, 0);
        
        for(int i=0; i<n ; i++){
            
            if(vis[i] !=1){
                dfs(i, vis, adj, st);
            }
        }
        
        
        vector<int> ans;
        
        for(int i= 0 ; i<n; i++){
            
            ans.push_back(st.top());
            st.pop();
        }
        
        return ans;
        
        // Your code here
    }
};
