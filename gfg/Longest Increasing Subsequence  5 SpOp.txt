// ============================= recursion ==============================
class Solution
{
    public:
    
    int solve(int curr, int prev, int arr[], int n){
        if(curr == n) 
            return 0;
        
        int take=0;
        if(prev == -1 || arr[curr] > arr[prev]){
           take = 1 + solve(curr+1, curr, arr, n); 
        }
        
        int notTake = 0 + solve(curr+1, prev, arr, n);
        
        return max(take, notTake);
    }
    
    int longestSubsequence(int n, int arr[])
    {
     
    return  solve(0, -1 , arr, n);
     
    }
};
// ============================= memoization ==============================
class Solution
{
    public:
    
    vector<vector<int>> dp;
    
    int solve(int curr, int prev, int arr[], int n){
        if(curr == n) 
            return 0;
        
        if(dp[curr][prev + 1] !=-1 )
            return dp[curr][prev +1];
        
        int take=0;
        if(prev == -1 || arr[curr] > arr[prev]){
           take = 1 + solve(curr+1, curr, arr, n); 
        }
        
        int notTake = 0 + solve(curr+1, prev, arr, n);
        
        return dp[curr][prev +1] = max(take, notTake);
    }
    
    int longestSubsequence(int n, int arr[])
    {
    
    dp.assign(n+1, vector<int>(n+1, -1)); 
    return  solve(0, -1 , arr, n);
     
    }
};

// ============================= dp  ==============================
class Solution
{
    public:

    
    int longestSubsequence(int n, int arr[])
    {
    
    vector<vector<int>> dp (n+1, vector<int>(n+1, 0)); 
    
    for(int curr = n-1 ; curr >= 0 ; curr--){
        for(int prev = curr - 1 ; prev >=-1 ; prev-- ){
            
            int take = 0;
            if(prev == -1 || arr[curr] >  arr[prev]){
                take = 1+ dp[curr + 1][curr+ 1];
            }
            
            int notTake = 0 + dp[curr + 1][prev + 1];
            
            dp[curr][prev + 1] = max(take, notTake);
                
        }
    }
    return  dp[0][0]; // dp[0][ -1 + 1] coordinate maintain kiye h
     
    }
};

// ============================= dp space optimization ==============================
class Solution
{
    public:

    
    int longestSubsequence(int n, int arr[])
    {
    
    vector<int> currRow (n+1, 0);
    vector<int> nextRow (n+1, 0); 
    
    for(int curr = n-1 ; curr >= 0 ; curr--){
        for(int prev = curr - 1 ; prev >=-1 ; prev-- ){
            
            int take = 0;
            if(prev == -1 || arr[curr] >  arr[prev]){
                take = 1+ nextRow[curr+ 1];
            }
            
            int notTake = 0 + nextRow[prev + 1];
            
            currRow[prev + 1] = max(take, notTake);
                
        }
        nextRow = currRow;
    }
    return  nextRow[0]; // dp[0][ -1 + 1] coordinate maintain kiye h
     
    }
};
//====================================== binarySearch (lower_bound) ==================
class Solution
{
    public:

    
    int longestSubsequence(int n, int arr[])
    {
    
    vector<int > ans;
    ans.push_back(arr[0]);
    
    for(int i = 1 ; i<n; i++){
        
        if(arr[i] > ans.back())
            ans.push_back(arr[i]);
        
        else{
            int index = lower_bound(ans.begin(), ans.end(), arr[i]) - ans.begin(); // lower_bound ==> (greater = )
            
            ans[index] = arr[i] ;
        }
    }
    return ans.size();
     
    }
    
    
    
};