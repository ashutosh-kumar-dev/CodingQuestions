class Solution
{
    public:
   
    int solve(string s1, string s2, int n, int m){
        
        if(n==0 || m==0)
            return 0;
        
        
        if(s1[n-1] == s2[m-1])
            return  1 + solve(s1, s2, n-1, m-1);
        else
           return  max(solve(s1, s2, n-1, m) , solve(s1, s2, n, m-1));
    }
    
    int lcs(int n, int m, string s1, string s2)
    {
       
       return solve(s1, s2, n, m);
        
    }
};
//======================================== memoization ======================================
class Solution
{
    public:
    vector<vector<int>> dp;
    int solve(string s1, string s2, int n, int m){
        
        if(n==0 || m==0)
            return 0;
        
        
        if(dp[n][m] !=-1 ) return dp[n][m];
        
        if(s1[n-1] == s2[m-1])
            return dp[n][m] = 1 + solve(s1, s2, n-1, m-1);
        else
           return dp[n][m] = max(solve(s1, s2, n-1, m) , solve(s1, s2, n, m-1));
    }
    
    int lcs(int n, int m, string s1, string s2)
    {
        dp.assign(n+1, vector<int> (m+1, -1));
       return solve(s1, s2, n, m);
        
    }
};

////======================================== dp ======================================
class Solution
{
    public:
    
    int lcs(int n, int m, string s1, string s2)
    {
       vector<vector<int>> dp(n+1, vector<int> (m+1, 0));
       
       for(int i=1 ; i<n+1; i++){
           for(int j=1 ; j<m+1 ; j++){
               
               if(s1[i-1] == s2[j-1])
                    dp[i][j] = 1 + dp[i-1][j-1];
               else
                    dp[i][j] = max( dp[i-1][j], dp[i][j-1]);
           }
       }
       
      return  dp[n][m];
       
       
      
        
    }
};

//============================= space optimized ==================================

class Solution
{
    public:
    
    int lcs(int n, int m, string s1, string s2)
    {
      // vector<vector<int>> dp(n+1, vector<int> (m+1, 0));
       
       vector<int> prevRow(m+1,0);
       vector<int> currRow(m+1,0);
       
       for(int i=1 ; i<n+1; i++){
           for(int j=1 ; j<m+1 ; j++){
               
               if(s1[i-1] == s2[j-1])
                    currRow[j] = 1 + prevRow[j-1];
               else
                    currRow[j] = max( prevRow[j], currRow[j-1]);
           }
           prevRow = currRow;
       }
       
      return  prevRow[m];
       
       
      
        
    }
};

