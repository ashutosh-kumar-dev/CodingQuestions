//========================== recursion ==================================

class Solution {
	public:
	
	    int solve(string s1, string s2, int n, int m){
	        if(n==0 || m==0)
	            return 0;
	       
	        
	        if(s1[n-1] == s2[m-1] && n!=m){
	            return 1 + solve(s1, s2, n-1, m-1);
	        }
	        else 
	           return  max( solve(s1, s2, n-1, m) , solve(s1, s2, n, m-1));
	    }
		int LongestRepeatingSubsequence(string s1){
		    
		    string s2 = s1;
		    int n= s1.length();
		  
		 return solve(s1, s2, n, n) ;
		   
		}

};

//============================= memoization ============================================

class Solution {
	public:
	    vector<vector<int>> dp;
	    int solve(string s1, string s2, int n, int m){
	        if(n==0 || m==0)
	            return 0;
	            
	       if(dp[n][m] !=-1) return dp[n][m];
	        
	        if(s1[n-1] == s2[m-1] && n!=m){
	            return dp[n][m] = 1 + solve(s1, s2, n-1, m-1);
	        }
	        else 
	           return dp[n][m] = max( solve(s1, s2, n-1, m) , solve(s1, s2, n, m-1));
	    }
		int LongestRepeatingSubsequence(string s1){
		    
		    string s2 = s1;
		    int n= s1.length();
		   dp.assign(n+1, vector<int> (n+1, -1));
		 return solve(s1, s2, n, n) ;
		   
		}

};

//========================================= dp ========================================
class Solution {
	public:
	  
	    
		int LongestRepeatingSubsequence(string s1){
		    
		    string s2 = s1;
		    int n= s1.length();
		    int m= s1.length();
		    
		   vector<vector<int>> dp(n+1, vector<int> (m+1, 0));
		   
		   for(int i=1; i<n+1; i++){
		       for(int j=1; j<m+1; j++){
		           
		           if(s1[i-1] == s2[j-1] && i!=j){
		               dp[i][j] = 1 + dp[i-1][j-1];
		               
		           }
		           else
		            dp[i][j] = max(dp[i-1][j] , dp[i][j-1]);
		       }
		   }
		   
		   
		 return dp[n][m] ;
		   
		}

};