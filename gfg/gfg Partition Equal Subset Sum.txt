
//=========================== recursion ======================


class Solution{
public:
    int solve(int n,int sum, int arr[]){
      
      if(sum == 0) return 1;
      if(n == 0) return 0;
      
      if(arr[n-1]<= sum )
        return  solve(n-1, sum - arr[n-1], arr) | solve(n-1, sum, arr);
    else 
        return solve(n-1,sum,arr);
        
        
    }
    
    int equalPartition(int N, int arr[])
    {
        int sum=0;
       for(int i=0; i<N ; i++) sum+=arr[i];
       
       if(sum%2 !=0 ) return 0;
       
       return solve(N, sum/2,arr);
       
    }
};
//============================= memoization ==========================
class Solution{
private:
    vector<vector<int>> dp;
public:
    int solve(int n,int sum, int arr[]){
      
      if(sum == 0) return 1;
      if(n == 0) return 0;
      
      if(dp[n][sum] !=-1 ) return dp[n][sum];
      
      if(arr[n-1]<= sum )
        return  dp[n][sum] = solve(n-1, sum - arr[n-1], arr) | solve(n-1, sum, arr);
    else 
        return dp[n][sum] = solve(n-1,sum,arr);
        
        
    }
    
    int equalPartition(int N, int arr[])
    {
        int sum=0;
       for(int i=0; i<N ; i++) sum+=arr[i];
       
       if(sum%2 !=0 ) return 0;
       
       dp.assign(N+1, vector<int> ((sum/2) +1 , -1));
       
       return solve(N, sum/2,arr);
       
    }
};
//======================= dp ==========================
class Solution{
private:
public:
    int solve(int n,int sum, int arr[]){
    
      vector<vector<int>> dp(n+1, vector<int > (sum + 1 ));
      
      for(int i=0 ; i<n+1; i++){
          for(int j=0 ; j<sum+1; j++){
              if(i == 0) dp[i][j]= 0;
              if(j == 0) dp[i][j]= 1;
          }
      }
      
      for(int i=1 ; i<n+1; i++){
          for(int j=1 ; j<sum+1; j++){
              if(arr[i-1]<= j )
                 dp[i][j] = dp[i-1][j- arr[i-1]] | dp[i-1][j];
              else 
                 dp[i][j] =  dp[i-1][j];
          }
      }
      return dp[n][sum];
      
        
    }
    
    int equalPartition(int N, int arr[])
    {
        int sum=0;
       for(int i=0; i<N ; i++) sum+=arr[i];
       
       if(sum%2 !=0 ) return 0;
       
      
       
       return solve(N, sum/2,arr);
       
    }
};